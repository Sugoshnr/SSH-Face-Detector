from keras import backend as K
import math

class Config:

	def __init__(self):

		self.verbose = True

		self.network = 'vgg'

		# setting for data augmentation
		self.use_horizontal_flips = False
		self.use_vertical_flips = False
		self.rot_90 = False

		# anchor box scales
		self.anchor_box_scales = {'M1':[4, 8], 'M2':[16, 32], 'M3':[64, 128]}
		self.img_output_length = {'M1':[28, 28], 'M2':[14, 14], 'M3':[7, 7]}

		# anchor box ratios
		self.anchor_box_ratios = [[1, 1]]
		# self.anchor_box_ratios = [[1, 1], [1./math.sqrt(2), 2./math.sqrt(2)], [2./math.sqrt(2), 1./math.sqrt(2)]]

		# size to resize the smallest side of the image
		# self.im_size = 224
		self.im_size = 1024

		# image channel-wise mean to subtract
		self.img_channel_mean = [103.939, 116.779, 123.68]
		self.img_scaling_factor = 1.0

		# number of ROIs at once
		self.num_rois = 4

		# stride at the RPN (this depends on the network configuration)
		self.rpn_stride = {'M1':8, 'M2':16, 'M3':32}

		self.balanced_classes = False

		# scaling the stdev
		self.std_scaling = 4.0
		self.classifier_regr_std = [8.0, 8.0, 4.0, 4.0]

		# overlaps for RPN
		self.rpn_min_overlap = 0.3
		self.rpn_max_overlap = 0.5

		# overlaps for classifier ROIs
		self.classifier_min_overlap = 0.1
		self.classifier_max_overlap = 0.5

		# placeholder for the class mapping, automatically generated by the parser
		self.class_mapping = None

		#location of pretrained weights for the base network 
		# weight files can be found at:
		# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_th_dim_ordering_th_kernels_notop.h5
		# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5

		self.diagnose = False
		self.model_path = 'model_ssh.vgg.hdf5'

		self.representation = {}
		self.eval = {}

		self.left_horizontal_stride = -11
		self.right_horizontal_stride = 11
		self.top_vertical_stride = 11
		self.bottom_vertical_stride = -11

		self.representation = {}
		
